generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id           String    @id
  name         String
  email        String    @unique
  passwordHash String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  recipes      Recipes[]
  profile      Profile?
}

model Profile {
  id             Int    @id @default(autoincrement())
  fixedCosts     Int    @default(0)
  daysOfWorking  Int    @default(0)
  salesPerDay    Int    @default(0)
  fixedCostTotal Float  @default(0)
  userId         String @unique
  user           Users  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Recipes {
  id           Int      @id @default(autoincrement())
  title        String
  describe     String?
  userId       String
  valuePartial Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  ingredients Ingredient[]
  additional  Additional[]
  expenses    Expenses?

  user Users? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Expenses {
  id         Int     @id @default(autoincrement())
  serving    Int     @default(0)
  pack       Int     @default(0)
  profit     Int     @default(0)
  valueTotal Float   @default(0)
  valueUnit  Float   @default(0)
  recipeId   Int     @unique
  recipe     Recipes @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Ingredient {
  id          Int    @id @default(autoincrement())
  name        String
  usedWeight  Int
  marketPrice Int
  grossWeight Int
  realAmount  Int
  recipeId    Int

  recipes Recipes @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Additional {
  id          Int    @id @default(autoincrement())
  name        String
  usedWeight  Int
  marketPrice Int
  grossWeight Int
  realAmount  Int
  recipeId    Int

  recipes Recipes @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
